<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <title>jωiXML processor - Help</title>
      <link rel="stylesheet" href="../jwiXML.css" type="text/css"/>
   </head>
   <body id="helpPage"><!--DO NOT EDIT. Generated from file:/D:/Saxonica/InvisibleXML/Mine/help/jwiXML-help-master.xhtml-->
      <div>
         <h2>
            <a href="https://invisiblexml.org/">
               <img src="../logos/logo_gradient.png"
                    alt="InvisibleXML Logo"
                    width="60pt"/>
            </a>
            <span style="font-style:italic">j</span>ω<img src="../logos/logotype.png" alt="InvisibleXML Logo" width="60pt"/> processor - HELP</h2>
         <p id="status" class="note">An interactive SaxonJS/JavaScript workbench processor of <a href="https://invisiblexml.org/">Invisible XML</a> - Workbench Version 1.1</p>
      </div>
      <h2>Table of Contents</h2>
      <ul>
         <li>
            <a href="#d2e44">Introduction</a>
         </li>
         <li>
            <a href="#d2e86">Editing grammars and inputs</a>
         </li>
         <li>
            <a href="#d2e128">Parsing an input against a grammar</a>
            <ul>
               <li>
                  <a href="#d2e134">Parsing and compiling the grammar</a>
               </li>
               <li>
                  <a href="#d2e172">Parsing the input string against the grammar</a>
               </li>
            </ul>
         </li>
         <li>
            <a href="#d2e184">Errors</a>
            <ul>
               <li>
                  <a href="#d2e190">Grammar errors</a>
               </li>
               <li>
                  <a href="#d2e262">Input parsing errors</a>
               </li>
               <li>
                  <a href="#d2e292">Serialisation errors</a>
               </li>
            </ul>
         </li>
         <li>
            <a href="#d2e311">Options</a>
         </li>
         <li>
            <a href="#d2e422">Loading grammars and inputs from external sources</a>
            <ul>
               <li>
                  <a href="#d2e449">Grammars in XML</a>
               </li>
            </ul>
         </li>
         <li>
            <a href="#d2e467">Change history</a>
            <ul>
               <li>
                  <a href="#d2e471">Version 1.1 - 2022nov01</a>
               </li>
               <li>
                  <a href="#d2e489">Version 1.3 - 2023may27</a>
               </li>
            </ul>
         </li>
      </ul>
      <p>TODO:</p>
      <ul>
         <li>Change the pictures to reflect version 1.3</li>
         <li>Look into adding an undo facility</li>
      </ul>
      <section>
         <h3>
            <a id="d2e44">Introduction</a>
         </h3>
         <div>
            <p>For the runtime files for the iXML processor and a sample <em>j</em>ωiXML application see <a href="https://github.com/johnlumley/jwiXML">here</a>.</p>
         </div>
         <div>
            <p>This workbench runs <i>entirely</i> within the browser client, using <a href="https://www.saxonica.com/saxon-js/documentation2/index.html">SaxonJS </a>as the top-level
               program and the <i>jwiXML</i> JavaScript library. There is <i>no</i> server-side processing, apart from
               initial delivery of necessary files.</p>
            <p>You can input and edit an iXML grammar either <i>ab initio</i> or by loading from a file on your computer
               or one of the test-case or sample grammars from the <a href="https://github.com/invisibleXML/ixml">iXML
                  GitHub repository</a>. The input string can also be edited or loaded from file or, in the case of a
               test-case or sample grammar, by selecting from one of a number of provided input strings, relevant to the
               grammar in question.</p>
            <p>Local file selection is either by a conventional selector dialog or by drag-and-drop of a file onto the
               relevant text area. (Note that on Firefox security hurdles may preclude drag-and-drop.)</p>
         </div>
      </section>
      <section>
         <h3>
            <a id="d2e86">Editing grammars and inputs</a>
         </h3>
         <div>
            <p>
               <span style="text-decoration:underline">iXML grammars</span> are edited in the upper textarea, where
               usual keystokes are supported, but there is no 'syntax awareness' during input:</p>
            <img width="400" src="img1.png"/>
            <p>The 'format' button above the textarea will, for a valid grammar, 'pretty-print' by replacing the text
               with a canonical <em>ixml</em> rendering of the parsed grammar. This form will line up all the rules so
               all their names are right aligned and their definitions left-aligned. Strings should be enclosed in the
               quotation characters used in the original (doubling such characters within the string as necessary). For
               alternatives, the separator character used is the first separator character (i.e. <code>';'</code> or
                  <code>'|'</code>) encountered whilst parsing that set of alternatives. If the serialisation of the
               definition of a rule will be longer than 50 characters, top-level alternatives will have a newline and
               appropriate indentation attached to their separators. </p>
            <p>This means that, for instance, an original line of the form: </p>
            <pre>a: [L] | "s" ; '"', #a; bcdef ; bcdef ,"a", bcdef; bcdef, "b", bcdef.
bcdef: [N]|("1"; "2" | "3").</pre>
            <p>will be formatted to </p>
            <pre>     a: [L]| 
        "s"| 
        '"',#a| 
        bcdef| 
        bcdef,"a",bcdef| 
        bcdef,"b",bcdef. 
 bcdef: [N]| ("1";"2";"3"). </pre>
            <p>
               <span style="text-decoration:underline">Input strings</span> to be parsed by that grammar are edited in
               the lower text-area:</p>
            <img width="300" src="img2.png"/>
            <p>The size of both of the textareas can be adjusted (at least on Chrome and Firefox) by the resizer
               'chevron' at the lower right hand corner.</p>
         </div>
      </section>
      <section>
         <h3>
            <a id="d2e128">Parsing an input against a grammar</a>
         </h3>
         <p>With the grammar and potential input string edited, clicking on the GO! button causes the following
            actions:</p>
         <section>
            <h4>
               <a id="d2e134">Parsing and compiling the grammar</a>
            </h4>
            <p>The grammar defined by the text in the Grammar window is parsed and compiled as an iXML grammar to
               produce an internal object representing the compiled grammar. Assuming the grammar has valid iXML syntax,
               this is then displayed in the 'Parse Grammar' section (which is normally hidden - just click on the
               show/hide to reveal).</p>
            <p> Here various projections of the grammar can be displayed either in XML format or an iXML textual
               serialisation. Either the original parsed grammar or the compilation (i.e. where the grammar has been
               reduced to a canonical form) thereof can be shown.:</p>
            <table>
               <tbody>
                  <tr>
                     <td>
                        <img width="300" src="img3.png"/>
                     </td>
                     <td>
                        <img width="300" src="img4.png"/>
                     </td>
                     <td>
                        <img width="300" src="img5.png"/>
                     </td>
                  </tr>
               </tbody>
            </table>
            <p>If you want to copy the parsed XML-format grammar the 'select grammar' button will select the whole of
               the grammar XML, so a simple 'Copy' keystroke action can get it into the clipboard as text.</p>
            <img width="300" src="img6.png"/>
         </section>
         <section>
            <h4>
               <a id="d2e172">Parsing the input string against the grammar</a>
            </h4>
            <p>Assuming the grammar has compiled and the input text string is not empty (or the 'Allow an empty string
               as input' option is checked), the text string is then parsed against the grammar, giving results in the
               Results section.</p>
            <img width="300" src="img7.png"/>
            <p>As with the parsed grammar, if you want to copy the resulting XML, the 'select result' button will select
               the whole of the result XML (and multiples if ambiguous or record-oriented processing was performed), so
               a simple 'Copy' keystroke action can get it into the clipboard as text.</p>
         </section>
      </section>
      <section>
         <h3>
            <a id="d2e184">Errors</a>
         </h3>
         <p>There are three main categories of errors detected:</p>
         <section>
            <h4>
               <a id="d2e190">Grammar errors</a>
            </h4>
            <p>Errors in the iXML grammar presented will be displayed under the 'Grammar Details' section. Such errors
               can be one of: </p>
            <ul>
               <li>The input grammar text supplied does not match the grammar for an iXML grammar. In this case the
                  reported error will attempt to identify why and where the parsing of that grammar failed, such
                  as:<pre class="grammarFailure">Grammar failure G000: 
Invalid rule syntax. Missing rule terminator character.
Expecting character:'.' - given: 'p' (codepoint 112).
Near line 9, column 2.
product: term, "×", operand.
 ^</pre> and <pre class="grammarFailure">Grammar failure S10: 
A Unicode character category code must match [A-Z][a-z]?. Provided: 'LZ'.
Near line 11, column 8.
id: [LZ].
       ^</pre>
               </li>
               <li>
                  <p>The grammar supplied, whilst grammatically correct (i.e. its text parses correctly) is invalid.
                     Such cases include</p>
                  <table class="options">
                     <thead>
                        <tr>
                           <th>Condition</th>
                           <th>Example</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td>There are references to non-terminals for which a rule definition has not been
                              provided.</td>
                           <td class="grammarFailure">
                              <pre>Grammar failure S02: 
No production rules for non-terminals: number</pre>
                           </td>
                        </tr>
                        <tr>
                           <td>There are multiple rule definitions for a non-terrminal.</td>
                           <td class="grammarFailure">
                              <pre>Grammar failure S03: 
Adding productions for an already-defined non-terminal: id</pre>
                           </td>
                        </tr>
                        <tr>
                           <td>There are non-terminal rule definitions which are unreachable through reference from the
                              starting rule. This will only be detected if the <em>Prohibit unreachable
                                 non-terminals</em> option has been checked.</td>
                           <td class="grammarFailure">
                              <pre>Grammar failure S002: 
Unreachable production rules for non-terminals: b</pre>
                           </td>
                        </tr>
                     </tbody>
                  </table>
               </li>
            </ul>
         </section>
         <section>
            <h4>
               <a id="d2e262">Input parsing errors</a>
            </h4>
            <p>The parsing of an input string against a valid iXML grammar can fail for a number of reasons. Such errors
               are displayed in the 'Result' portion of the workbench, currently as, in line with the specification, an
               XML document with <code>@ixml:state="failed"</code> on the topmost element, such as:</p>
            <pre class="parseFailure">&lt;ixml xmlns:ixml="http://invisiblexml.org/NS" ixml:state="failed"&gt;
Failure at line 1 column 2
Given '/' (codepoint 47). Expecting one of:
   "+" {#8: sum: term, "+", term++"+".},
   "×" {#10: product: term, "×", operand.},
   [&lt;=&gt;≠≤≥] {#4: compare: ["&lt;=&gt;≠≤≥"].}
Input:
   a/b
    ^
&lt;/ixml&gt;</pre>
            <p>where an unexpected (operator) character was encountered. In this case the processor attempts to identify
               what characters would have been admissable at this point in the parse, and in which rules (identified by
               line number and with original source) the parse failed. (This is currently not available for
               internally-generated rules, such as those for repetition constructs.) </p>
            <p>In cases of high potential ambiguity, such as the grammar:</p>
            <pre>specification: "{", rule*, "}".
rule: definition*.
definition: id, "=", value.
id:[L].
value:[N].</pre>
            <p>when run with an input that can trigger such ambiguity, such as <code>{}</code> (possible solutions could
               include no rule or a potentially infinite sequence of rules each containing no definitions) the
                  <em>j</em>ωiXML processor can get into an infinite loop. Internally there is a limit of triggering
               1000 productions on processing a character from the input string. If this limit it reached a failure will
               assumed: </p>
            <pre class="parseFailure">&lt;ixml xmlns:ixml="http://invisiblexml.org/NS" ixml:state="failed"&gt;
Probable looping processing character '{' @ line 1, column 1&lt;/ixml&gt;</pre>
         </section>
         <section>
            <h4>
               <a id="d2e292">Serialisation errors</a>
            </h4>
            <p>The input string may have parsed correctly, but it is still possible that the conversion (serialisation)
               to XML fails as the resulting tree would not be a valid XML document. In such cases the error is
               reported, again in the 'Result' section:</p>
            <pre class="parseFailure">&lt;ixml xmlns:ixml="http://invisiblexml.org/NS" ixml:state="failed"&gt;
An attribute node may not be the final parse result @input&lt;/ixml&gt;</pre>
            <p>or</p>
            <pre class="parseFailure">&lt;ixml xmlns:ixml="http://invisiblexml.org/NS" ixml:state="failed"&gt;
Multiple nodes may not be the final parse result:&lt;expression/&gt;,@compare,&lt;expression/&gt;&lt;/ixml&gt;</pre>
            <p>Note that when 'Treat as records' is enabled, multiple document trees can be generated and will be
               serialised in sequence in the result display.</p>
         </section>
      </section>
      <section>
         <h3>
            <a id="d2e311">Options</a>
         </h3>
         <p>The following options controlling grammar parsing, input string treatment and result display are supported
            via checkboxes:</p>
         <table class="options">
            <thead>
               <tr>
                  <th>Option</th>
                  <th>Effect</th>
               </tr>
            </thead>
            <tbody>
               <tr>
                  <td class="option">Prohibit unreachable non-terminals</td>
                  <td>When checked, all non-terminals in the grammar must be reachable through a reference path from the
                     start (first) rule.</td>
               </tr>
               <tr>
                  <td class="option">Permit missing non-terminals (grammar parsing only)</td>
                  <td>When checked, missing non-terminals in the grammar may be referenced in the grammar (for
                     experimentation in grammar combination)</td>
               </tr>
               <tr>
                  <td class="option">Tovey-Walsh rewrites</td>
                  <td>When checked, <code>f+</code> constructs are rewritten as <code>f+ =&gt; f-plus. f-plus: f, f-plus|
                        ().</code> rather than the <code>f-plus: f, f*.</code> rewrite given in the spec. This is
                     currently the default, as it seems to perform significantly quicker.</td>
               </tr>
               <tr>
                  <td class="option">Allow an empty string as input</td>
                  <td>Normally if the input is an empty string, no attempt is made to parse - just the grammar is
                     processed and displayed. Checking this allows processing of an empty string as input, which is
                     probably only needed for cetain test cases.</td>
               </tr>
               <tr>
                  <td class="option">Treat as records</td>
                  <td>When checked, the input is assumed to be a sequence of records separated by character sequences
                     which match a given regular expression (for which '\n' is the default). The separator can be edited
                     in the displayed text input, when this option is selected. </td>
               </tr>
               <tr>
                  <td class="option">Show Parser States</td>
                  <td>Displays the internal state transitions of the Earley parser operating on the input. This is
                        <strong>NOT</strong> recommended for use with large grammars and inputs as memory overflows can
                     be encountered.</td>
               </tr>
               <tr>
                  <td class="option">Show only one ambiguous solution</td>
                  <td>When the parse is ambiguous, with multiple possible solutions, this forces only one to be
                     returned, which will still be marked as ambiguous.</td>
               </tr>
               <tr>
                  <td class="option">Show all processed marks</td>
                  <td>If checked, marks for ignore ('-'), attribute ('@') or insertion ('+') serialisation are not
                     honoured but rather placed on the full parse tree output either as an <code>@ixml:mark</code>
                     attribute or an <code>ixml:insert</code> element. This ony applies to marks on the original grammar
                     and not to artefactual marks, such as those used for generated non-terminals implementing
                     optionality or repetition.</td>
               </tr>
               <tr>
                  <td class="option">Indent result</td>
                  <td>When checked, the results will be displayed as a serialization of the XML tree with indentation
                     applied. This means that whitespace-only text nodes may be altered or in some cases deleted. If
                     your application requires strict whitespace preservation, uncheck this option.</td>
               </tr>
            </tbody>
         </table>
      </section>
      <section>
         <h3>
            <a id="d2e422">Loading grammars and inputs from external sources</a>
         </h3>
         <p>Both grammar and input texts can be read from local filestore by using the appropriate 'Choose file' (or
            'Browse') button, which permits a file to be read and its text loaded into the textarea. The name of the
            file loaded is displayed next to the file chooser. Files can also be 'drag-and-dropped' onto the textarea,
            though in Firefox security settings will probably have to be altered (it seems to work fine in Chrome).</p>
         <img width="300" src="img8.png"/>
         <p>Grammars can also be loaded from web-repositories, in particular from the <a href="https://github.com/invisiblexml/ixml/">InvisibleXML test-suites or sample grammars</a> using the
            Grammar 'Test/sample' dropdown:</p>
         <img width="300" src="img9.png"/>
         <p>A <a href="https://invisiblexml.org/test-catalog/">browsable catalog</a> of the test suite is also
            available.</p>
         <p>When there are sample inputs available for one of these test or sample grammars, the 'Test/Sample' dropdown
            above the Input textarea will be populated.</p>
         <img width="300" src="img10.png"/>
         <section>
            <h4>
               <a id="d2e449">Grammars in XML</a>
            </h4>
            <p>Note that some of these test cases provide the iXML grammar in its XML serialisation form. The workbench
               recognises such a situation and will show and use that form, but editing in the textarea under these
               circumstances will have <em>no effect on the grammar being used in parsing</em>. Files containing iXML
               grammars serialised as XML loaded by other means (file selection, drag-and-drop) will be (currently)
               treated as simple text and currently will therefore fail to be parsed. (The <a href="https://github.com/johnlumley/jwiXML">jwlProcessor.xsl</a> library contains a
                  <code>jwl:parseXML()</code> function that <strong>will</strong> accept XML-serialised grammars)</p>
         </section>
      </section>
      <section>
         <h3>
            <a id="d2e467">Change history</a>
         </h3>
         <section>
            <h4>
               <a id="d2e471">Version 1.1 - 2022nov01</a>
            </h4>
            <ul>
               <li>Improvements to error reporting.</li>
               <li>Revamped help.</li>
               <li>Addition of 'unreachable non-terminals check' option.</li>
               <li>'Pretty-print' reformatting of grammar text.</li>
               <li>Corrected ixml serialisation of multi-part (alts) option and repetition constructs.</li>
            </ul>
         </section>
         <section>
            <h4>
               <a id="d2e489">Version 1.3 - 2023may27</a>
            </h4>
            <ul>
               <li>Tooltip help boxes added.</li>
               <li>Improvements to error reporting,- tracing now identifies original source line in case of expanded
                  repeats and optionals.</li>
               <li>Support for 'Tovry-Walsh' repetition and optional rewrites.</li>
               <li>Addition of 'permit missing non-terminals' option, for grammar combination testing.</li>
               <li>Addition of 'identation suppression' in result XML (for cases with significant whitespace)</li>
            </ul>
         </section>
      </section>
   </body>
</html>
