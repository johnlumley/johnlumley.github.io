<tests QT4="https://raw.githubusercontent.com/qt4cg/qt4tests/refs/heads/master"
   XSLT4="https://raw.githubusercontent.com/qt4cg/xslt40-test/refs/heads/master"
   SPEC="https://qt4cg.org/specifications/xpath-functions-40/Overview.html" title="XQuery">
   <group name="General" href="general/">
      <xpath name="argument keywords" href="keywords.xp"/>
   </group>
   <group name="CSV Processing" href="CSV/">
      <xpath name="csv1" href="csv1.xquery"/>
      <xpath name="csv2" href="csv2.xquery"/>
      <xpath name="csv3" href="csv3.xquery">
         <input type="text" name="date/people/money" href="csv3.csv"/>
         <input type="text" name="larger" href="csv4.csv"/>
      </xpath>
   </group>
   <group name="Higher-Order" href="HOF/">
      <xpath name="filter() - positional" href="filter-1.xp"/>
      <xpath name="do-until() - Squares" href="do-until-1.xp"/>
      <xpath name="do-until() - Fibonacci" href="do-until-2.xp"/>
      <xpath name="partition() - group-together" href="partition-1.xp"/>
      <xpath name="partition() - line-wrapping" href="line-wrap-1.xp">
         <problem>Line wrap each of the sentences using the <spec-link ref="func-partition"
               >partition()</spec-link> function. The input to <code>$line-wrap()</code> for each sentence is supplied
            as a non-empty normalized string.</problem>
         <input type="text" name="John 1" href="john1.txt"/>
      </xpath>
      <xpath name="partition() - line-wrapping" href="line-wrap-2.xp">
         <!--<problem>Line wrap a string using the <spec-link ref="func-partition"
               >partition()</spec-link> function. The input to <code>$line-wrap()</code> is supplied
            as a non-empty normalized string.</problem>-->
         <solution>This is a potential solution. See if you can make the processing of the sentences
            as a whole more terse.</solution>
         <input type="text" name="John 1" href="john1.txt"/>
      </xpath>
      <xpath solution="" name="partition() - line-wrapping (terser)" href="line-wrap-3.xp">
         <input type="text" name="John 1" href="john1.txt"/>
      </xpath>
      <xpath name="transitive-closure() - Reporting" href="transitive-closure-1.xp">
         <input type="xml" name="management" href="management.xml"/>
         <input type="xml" name="management1" href="management1.xml"/>
      </xpath>
   </group>
   <group name="JSON" href="JSON/">
      <xpath name="lookup" href="lookup1.xp">
         <input type="json" name="people" href="people.json"/>
      </xpath>
      <xpath name="element-to-map()" href="element-to-map1.xp">
         <input type="xml" name="Simple" href="in1.xml"/>
         <input type="xml" name="Attributes" href="in2.xml"/>
         <input type="xml" name="Repeated Children" href="in3.xml"/>
      </xpath>
      <xpath name="element-to-map() - options" href="element-to-map2.xp">
         <input type="xml" name="Simple" href="in1.xml"/>
         <input type="xml" name="Attributes" href="in2.xml"/>
         <input type="xml" name="Repeated Children" href="in3.xml"/>
      </xpath>
   </group>
   <group name="Maps" href="MAP/">
      <xpath name="map-build()" href="map-build-1.xp"> </xpath>
      <xpath name="map-build() - index" href="map-build-2.xp">
         <input name="Prague" type="xml" href="$XSLT4/tests/misc/docbook/prague2016mhk.xml"/>
      </xpath>
      <xpath name="map-build() - frequency analysis" href="frequency-1.xp">
         <problem>
            <div>Build a 'bar-chart' of the 20 most frequent words appearing in non-empty
               <code>para</code> elements (in descending order). Display it in a format
               like:<pre>  to ***************************** 89
 and **************** 48
 for ************* 41
JSON ************* 40
</pre> where each star represents three occurrences of the word.</div>
            <div>You may find <spec-link ref="func-map-build">map:build()</spec-link>, <spec-link
                  ref="func-sort-with">sort-with()</spec-link> and <spec-link ref="func-replicate"
                  >replicate()</spec-link> useful. <p>We would probably produce SVG, but this
                  example focusses on the XPath processing</p></div>
         </problem>
         <input name="Prague local" type="xml" href="mhk.xml"/>
         <!--<input name="Prague" type="xml" href="$XSLT4/tests/misc/docbook/prague2016mhk.xml"/>-->
      </xpath>
      <xpath name="map-merge()" href="map-merge-1.xp">
         <problem>Explore how <spec-link ref="func-map-build">map:build()</spec-link>, <spec-link
               ref="func-map-build">map:entries()</spec-link> and <spec-link ref="func-map-build"
               >map:merge()</spec-link> are related</problem>
      </xpath>
   </group>

</tests>
