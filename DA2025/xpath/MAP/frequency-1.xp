let $words := .//para 
    =!> normalize-space() 
    =!> tokenize() 
    =!> replace('\(|\)|\.|,|"','')
    => filter(matches(?,'\S'))
let $lcase := $words =!> lower-case() 
let $distinct := distinct-values($words)
let $top20 := 
  map:build($distinct,
     identity#1,
     fn ($w) {let $lc := lower-case($w) 
            return count($lcase[. eq $lc])}
  ) 
  => map:entries()
  => sort-with(fn($x,$y) {if($x?* gt $y?*) then -1 else 0})
  => subsequence(1,20)
let $longest := max($top20 =!> map:keys() =!> string-length())
return 
   for-each($top20, fn($x) {
     let $k := map:keys($x)
     let $v := map:items($x)
     return 
        (replicate(' ', ($longest - string-length($k))), $k, " ",
         replicate('*', $v idiv 3), " ",
         string($v)) 
        => string-join()
     }
    )
    => string-join('&#xA;')
